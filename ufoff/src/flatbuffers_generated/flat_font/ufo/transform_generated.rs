// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TransformOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Transform<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Transform<'a> {
  type Inner = Transform<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Transform<'a> {
  pub const VT_XSCALE: flatbuffers::VOffsetT = 4;
  pub const VT_XYSCALE: flatbuffers::VOffsetT = 6;
  pub const VT_YXSCALE: flatbuffers::VOffsetT = 8;
  pub const VT_YSCALE: flatbuffers::VOffsetT = 10;
  pub const VT_XOFFSET: flatbuffers::VOffsetT = 12;
  pub const VT_YOFFSET: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Transform { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args TransformArgs
  ) -> flatbuffers::WIPOffset<Transform<'bldr>> {
    let mut builder = TransformBuilder::new(_fbb);
    builder.add_yOffset(args.yOffset);
    builder.add_xOffset(args.xOffset);
    builder.add_yScale(args.yScale);
    builder.add_yxScale(args.yxScale);
    builder.add_xyScale(args.xyScale);
    builder.add_xScale(args.xScale);
    builder.finish()
  }


  #[inline]
  pub fn xScale(&self) -> f32 {
    self._tab.get::<f32>(Transform::VT_XSCALE, Some(1.0)).unwrap()
  }
  #[inline]
  pub fn xyScale(&self) -> f32 {
    self._tab.get::<f32>(Transform::VT_XYSCALE, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn yxScale(&self) -> f32 {
    self._tab.get::<f32>(Transform::VT_YXSCALE, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn yScale(&self) -> f32 {
    self._tab.get::<f32>(Transform::VT_YSCALE, Some(1.0)).unwrap()
  }
  #[inline]
  pub fn xOffset(&self) -> f32 {
    self._tab.get::<f32>(Transform::VT_XOFFSET, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn yOffset(&self) -> f32 {
    self._tab.get::<f32>(Transform::VT_YOFFSET, Some(0.0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Transform<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("xScale", Self::VT_XSCALE, false)?
     .visit_field::<f32>("xyScale", Self::VT_XYSCALE, false)?
     .visit_field::<f32>("yxScale", Self::VT_YXSCALE, false)?
     .visit_field::<f32>("yScale", Self::VT_YSCALE, false)?
     .visit_field::<f32>("xOffset", Self::VT_XOFFSET, false)?
     .visit_field::<f32>("yOffset", Self::VT_YOFFSET, false)?
     .finish();
    Ok(())
  }
}
pub struct TransformArgs {
    pub xScale: f32,
    pub xyScale: f32,
    pub yxScale: f32,
    pub yScale: f32,
    pub xOffset: f32,
    pub yOffset: f32,
}
impl<'a> Default for TransformArgs {
  #[inline]
  fn default() -> Self {
    TransformArgs {
      xScale: 1.0,
      xyScale: 0.0,
      yxScale: 0.0,
      yScale: 1.0,
      xOffset: 0.0,
      yOffset: 0.0,
    }
  }
}
pub struct TransformBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TransformBuilder<'a, 'b> {
  #[inline]
  pub fn add_xScale(&mut self, xScale: f32) {
    self.fbb_.push_slot::<f32>(Transform::VT_XSCALE, xScale, 1.0);
  }
  #[inline]
  pub fn add_xyScale(&mut self, xyScale: f32) {
    self.fbb_.push_slot::<f32>(Transform::VT_XYSCALE, xyScale, 0.0);
  }
  #[inline]
  pub fn add_yxScale(&mut self, yxScale: f32) {
    self.fbb_.push_slot::<f32>(Transform::VT_YXSCALE, yxScale, 0.0);
  }
  #[inline]
  pub fn add_yScale(&mut self, yScale: f32) {
    self.fbb_.push_slot::<f32>(Transform::VT_YSCALE, yScale, 1.0);
  }
  #[inline]
  pub fn add_xOffset(&mut self, xOffset: f32) {
    self.fbb_.push_slot::<f32>(Transform::VT_XOFFSET, xOffset, 0.0);
  }
  #[inline]
  pub fn add_yOffset(&mut self, yOffset: f32) {
    self.fbb_.push_slot::<f32>(Transform::VT_YOFFSET, yOffset, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TransformBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TransformBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Transform<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Transform<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Transform");
      ds.field("xScale", &self.xScale());
      ds.field("xyScale", &self.xyScale());
      ds.field("yxScale", &self.yxScale());
      ds.field("yScale", &self.yScale());
      ds.field("xOffset", &self.xOffset());
      ds.field("yOffset", &self.yOffset());
      ds.finish()
  }
}
