// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum GuidelineOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Guideline<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Guideline<'a> {
  type Inner = Guideline<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Guideline<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;
  pub const VT_ANGLE: flatbuffers::VOffsetT = 8;
  pub const VT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_COLOR: flatbuffers::VOffsetT = 12;
  pub const VT_IDENTIFIER: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Guideline { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args GuidelineArgs<'args>
  ) -> flatbuffers::WIPOffset<Guideline<'bldr>> {
    let mut builder = GuidelineBuilder::new(_fbb);
    if let Some(x) = args.identifier { builder.add_identifier(x); }
    if let Some(x) = args.color { builder.add_color(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_angle(args.angle);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.finish()
  }


  #[inline]
  pub fn x(&self) -> f32 {
    self._tab.get::<f32>(Guideline::VT_X, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn y(&self) -> f32 {
    self._tab.get::<f32>(Guideline::VT_Y, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn angle(&self) -> f32 {
    self._tab.get::<f32>(Guideline::VT_ANGLE, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Guideline::VT_NAME, None)
  }
  #[inline]
  pub fn color(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Guideline::VT_COLOR, None)
  }
  #[inline]
  pub fn identifier(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Guideline::VT_IDENTIFIER, None)
  }
}

impl flatbuffers::Verifiable for Guideline<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .visit_field::<f32>("angle", Self::VT_ANGLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("color", Self::VT_COLOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("identifier", Self::VT_IDENTIFIER, false)?
     .finish();
    Ok(())
  }
}
pub struct GuidelineArgs<'a> {
    pub x: f32,
    pub y: f32,
    pub angle: f32,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub color: Option<flatbuffers::WIPOffset<&'a str>>,
    pub identifier: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for GuidelineArgs<'a> {
  #[inline]
  fn default() -> Self {
    GuidelineArgs {
      x: 0.0,
      y: 0.0,
      angle: 0.0,
      name: None,
      color: None,
      identifier: None,
    }
  }
}
pub struct GuidelineBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GuidelineBuilder<'a, 'b> {
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(Guideline::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(Guideline::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_angle(&mut self, angle: f32) {
    self.fbb_.push_slot::<f32>(Guideline::VT_ANGLE, angle, 0.0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Guideline::VT_NAME, name);
  }
  #[inline]
  pub fn add_color(&mut self, color: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Guideline::VT_COLOR, color);
  }
  #[inline]
  pub fn add_identifier(&mut self, identifier: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Guideline::VT_IDENTIFIER, identifier);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GuidelineBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GuidelineBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Guideline<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Guideline<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Guideline");
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("angle", &self.angle());
      ds.field("name", &self.name());
      ds.field("color", &self.color());
      ds.field("identifier", &self.identifier());
      ds.finish()
  }
}
