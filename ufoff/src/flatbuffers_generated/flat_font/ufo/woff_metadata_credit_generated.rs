// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WoffMetadataCreditOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WoffMetadataCredit<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WoffMetadataCredit<'a> {
  type Inner = WoffMetadataCredit<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> WoffMetadataCredit<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_URL: flatbuffers::VOffsetT = 6;
  pub const VT_ROLE: flatbuffers::VOffsetT = 8;
  pub const VT_DIR: flatbuffers::VOffsetT = 10;
  pub const VT_CLASS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WoffMetadataCredit { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args WoffMetadataCreditArgs<'args>
  ) -> flatbuffers::WIPOffset<WoffMetadataCredit<'bldr>> {
    let mut builder = WoffMetadataCreditBuilder::new(_fbb);
    if let Some(x) = args.class { builder.add_class(x); }
    if let Some(x) = args.dir { builder.add_dir(x); }
    if let Some(x) = args.role { builder.add_role(x); }
    if let Some(x) = args.url { builder.add_url(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WoffMetadataCredit::VT_NAME, None).unwrap()
  }
  #[inline]
  pub fn url(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WoffMetadataCredit::VT_URL, None)
  }
  #[inline]
  pub fn role(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WoffMetadataCredit::VT_ROLE, None)
  }
  #[inline]
  pub fn dir(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WoffMetadataCredit::VT_DIR, None)
  }
  #[inline]
  pub fn class(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WoffMetadataCredit::VT_CLASS, None)
  }
}

impl flatbuffers::Verifiable for WoffMetadataCredit<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("url", Self::VT_URL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("role", Self::VT_ROLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dir", Self::VT_DIR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("class", Self::VT_CLASS, false)?
     .finish();
    Ok(())
  }
}
pub struct WoffMetadataCreditArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub url: Option<flatbuffers::WIPOffset<&'a str>>,
    pub role: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dir: Option<flatbuffers::WIPOffset<&'a str>>,
    pub class: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for WoffMetadataCreditArgs<'a> {
  #[inline]
  fn default() -> Self {
    WoffMetadataCreditArgs {
      name: None, // required field
      url: None,
      role: None,
      dir: None,
      class: None,
    }
  }
}
pub struct WoffMetadataCreditBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> WoffMetadataCreditBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WoffMetadataCredit::VT_NAME, name);
  }
  #[inline]
  pub fn add_url(&mut self, url: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WoffMetadataCredit::VT_URL, url);
  }
  #[inline]
  pub fn add_role(&mut self, role: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WoffMetadataCredit::VT_ROLE, role);
  }
  #[inline]
  pub fn add_dir(&mut self, dir: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WoffMetadataCredit::VT_DIR, dir);
  }
  #[inline]
  pub fn add_class(&mut self, class: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WoffMetadataCredit::VT_CLASS, class);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> WoffMetadataCreditBuilder<'a, 'b> {
    let start = _fbb.start_table();
    WoffMetadataCreditBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WoffMetadataCredit<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, WoffMetadataCredit::VT_NAME,"name");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for WoffMetadataCredit<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("WoffMetadataCredit");
      ds.field("name", &self.name());
      ds.field("url", &self.url());
      ds.field("role", &self.role());
      ds.field("dir", &self.dir());
      ds.field("class", &self.class());
      ds.finish()
  }
}
