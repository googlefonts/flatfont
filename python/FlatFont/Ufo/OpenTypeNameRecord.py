# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ufo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpenTypeNameRecord(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpenTypeNameRecord()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOpenTypeNameRecord(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OpenTypeNameRecord
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpenTypeNameRecord
    def NameID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # OpenTypeNameRecord
    def PlatformID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # OpenTypeNameRecord
    def EncodingID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # OpenTypeNameRecord
    def LanguageID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # OpenTypeNameRecord
    def String(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(5)
def OpenTypeNameRecordStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddNameID(builder, nameID): builder.PrependUint16Slot(0, nameID, 0)
def OpenTypeNameRecordAddNameID(builder, nameID):
    """This method is deprecated. Please switch to AddNameID."""
    return AddNameID(builder, nameID)
def AddPlatformID(builder, platformID): builder.PrependUint16Slot(1, platformID, 0)
def OpenTypeNameRecordAddPlatformID(builder, platformID):
    """This method is deprecated. Please switch to AddPlatformID."""
    return AddPlatformID(builder, platformID)
def AddEncodingID(builder, encodingID): builder.PrependUint16Slot(2, encodingID, 0)
def OpenTypeNameRecordAddEncodingID(builder, encodingID):
    """This method is deprecated. Please switch to AddEncodingID."""
    return AddEncodingID(builder, encodingID)
def AddLanguageID(builder, languageID): builder.PrependUint16Slot(3, languageID, 0)
def OpenTypeNameRecordAddLanguageID(builder, languageID):
    """This method is deprecated. Please switch to AddLanguageID."""
    return AddLanguageID(builder, languageID)
def AddString(builder, string): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(string), 0)
def OpenTypeNameRecordAddString(builder, string):
    """This method is deprecated. Please switch to AddString."""
    return AddString(builder, string)
def End(builder): return builder.EndObject()
def OpenTypeNameRecordEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)