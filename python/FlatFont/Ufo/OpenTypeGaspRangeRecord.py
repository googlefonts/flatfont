# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Ufo

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpenTypeGaspRangeRecord(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpenTypeGaspRangeRecord()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOpenTypeGaspRangeRecord(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OpenTypeGaspRangeRecord
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpenTypeGaspRangeRecord
    def RangeMaxPPEM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # OpenTypeGaspRangeRecord
    def RangeGaspBehavior(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OpenTypeGaspRangeRecord
    def RangeGaspBehaviorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # OpenTypeGaspRangeRecord
    def RangeGaspBehaviorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpenTypeGaspRangeRecord
    def RangeGaspBehaviorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def Start(builder): builder.StartObject(2)
def OpenTypeGaspRangeRecordStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddRangeMaxPPEM(builder, rangeMaxPPEM): builder.PrependUint32Slot(0, rangeMaxPPEM, 0)
def OpenTypeGaspRangeRecordAddRangeMaxPPEM(builder, rangeMaxPPEM):
    """This method is deprecated. Please switch to AddRangeMaxPPEM."""
    return AddRangeMaxPPEM(builder, rangeMaxPPEM)
def AddRangeGaspBehavior(builder, rangeGaspBehavior): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rangeGaspBehavior), 0)
def OpenTypeGaspRangeRecordAddRangeGaspBehavior(builder, rangeGaspBehavior):
    """This method is deprecated. Please switch to AddRangeGaspBehavior."""
    return AddRangeGaspBehavior(builder, rangeGaspBehavior)
def StartRangeGaspBehaviorVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OpenTypeGaspRangeRecordStartRangeGaspBehaviorVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRangeGaspBehaviorVector(builder, numElems)
def End(builder): return builder.EndObject()
def OpenTypeGaspRangeRecordEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)